@page "/imageGenerator"
@using OpenAI;
@using OpenAI.Images;

<PageTitle>Image Generator</PageTitle>
<h2 style="text-align:center">
    <b>IA Gerador de imagens</b>
</h2>
<br />
<h5>
    <b>Dado um prompt, o modelo retornará uma imagem ou imagens geradas.</b>
</h5>
<div class="row">
    <div class="col-sm-10">
        <input type="text" class="form-control" placeholder="Me dê uma pista..." @bind="prompt" />
    </div>
    <div class="col-sm-2">
        <button class="btn btn-success" @onclick="StartImageGeneratorService"> Gerar </button>
    </div>
</div>
<br />

@if (_isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
        </div>
    </div>
}
else
{
    <p>@((MarkupString)GeneratedImage)</p>
}
<p style="color:red">@ErrorMessage</p>

@code
{
    string ErrorMessage = string.Empty;
    string prompt = string.Empty;
    string GeneratedImage = string.Empty;
    bool _isLoading = false;
    string ApiKey = string.Empty;

    protected override void OnInitialized()
    {
        ApiKey = "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";
    }

    public async Task StartImageGeneratorService()
    {
        try
        {
            StateHasChanged();
            ErrorMessage = string.Empty;
            GeneratedImage = string.Empty;
            _isLoading = true;
            var _openAIClient = new OpenAIClient(new OpenAIAuthentication(ApiKey));
            var imageResult = await _openAIClient.ImagesEndPoint.GenerateImageAsync(prompt, 3, ImageSize.Small);
            foreach (var image in imageResult)
            {
                GeneratedImage += "<img src='" + image + "'/>&nbsp;&nbsp;&nbsp;";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}

<Rodape />